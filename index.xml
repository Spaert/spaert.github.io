<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hello World</title>
    <link>https://spaert.github.io/</link>
    <description>Recent content on Hello World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 30 Jul 2019 20:28:35 +0800</lastBuildDate>
    
	<atom:link href="https://spaert.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>sequence assembly</title>
      <link>https://spaert.github.io/posts/assembly/</link>
      <pubDate>Wed, 12 Jun 2019 21:51:13 +0800</pubDate>
      
      <guid>https://spaert.github.io/posts/assembly/</guid>
      <description> Mapping assembly (Reference assembly) assembling reads against an existing backbone sequence
De Novo assembly assembling reads without using a template
OLC  Overlap
 Layout
 Consensus De-Brujin Graph   Greedy </description>
    </item>
    
    <item>
      <title>SOP of bacteria sequencing analysis</title>
      <link>https://spaert.github.io/posts/sop-of-bacteria-sequencing-analysis/</link>
      <pubDate>Tue, 11 Jun 2019 02:16:24 +0800</pubDate>
      
      <guid>https://spaert.github.io/posts/sop-of-bacteria-sequencing-analysis/</guid>
      <description>Quality control
 QC tools (FastQC, MultiQC &amp;hellip;)
 Is coverage enough ?
 Is length read length enough ?
 Is there contamination ?
  Assembly
 Assembler tools (Canu, Unicycler, Flye, Ra &amp;hellip;)
 Genome Polishing (Racon, medaka, nanopolish &amp;hellip;)
 Plasmid check(BLAST)
  Genome annotation
 NCBI annotation
 COG analysis for protein functions
  16S rRNA/whole genome phylogenetic trees
 Antibiotic-resistant gene prediction</description>
    </item>
    
    <item>
      <title>Insights into Bacterial Genome Sequence Analysis</title>
      <link>https://spaert.github.io/posts/insights-into-bacterial-genome-sequence-analysis/</link>
      <pubDate>Sun, 09 Jun 2019 21:51:13 +0800</pubDate>
      
      <guid>https://spaert.github.io/posts/insights-into-bacterial-genome-sequence-analysis/</guid>
      <description>Today goals  Things you should know before assembly  Fastq format Fasta format GC- content Status of genome  Step to bacterial sequencing analysis  Things you should know before assembly Fastq format start with @
@cc3e68c4-b53d-43da-be7e-b961113007e2 -&amp;gt; sequence name ATCCGGAATCGGTTACTGTTGGGAACCTTTGC -&amp;gt; sequence + -&amp;gt; quality line break #%(*))++.2/148447;7+001./18-7-,,30&amp;amp;*2 -&amp;gt; quality score  Fasta format start with &amp;gt;
&amp;gt;tig00000001	-&amp;gt; sequence name TGATAAAAGTATTCATATAATCTCCTATCATTTCAAAATTTAAT -&amp;gt; sequence &amp;gt;tig00000002	ATATTAGTGTGTCTATTTTATGGGGCTAGGAAAGGAGGTACATT  GC-content the percentage of nitrogenous bases on a DNA or RNA molecule that are either guanine or cytosine $$ \frac{G+C}{A+T+G+C} \times 100 \% $$</description>
    </item>
    
    <item>
      <title>Summer training homework</title>
      <link>https://spaert.github.io/posts/summertraining_homework/</link>
      <pubDate>Tue, 30 Jul 2019 20:28:35 +0800</pubDate>
      
      <guid>https://spaert.github.io/posts/summertraining_homework/</guid>
      <description>組裝 分別使用Canu,Flye, Ra, Shasta組裝ecoli k-12 標準菌株並製作完整組裝報告
菌株位置：
/bip5_disk/peiwen107/medaka_alignment/ecoli/Ecoli_1.5G.fastq   Step1. Run abyss-fac for raw read Step2. Run fastqc
/bip6_disk/shiuanrung107/fastqc/FastQC/fastqc /bip5_disk/peiwen107/medaka_alignment/ecoli/Ecoli_1.5G.fastq  Step3. Run Assembler (要計算時間)
 Step4. Analysis result
 run blast run bandage for contig status run abyss-fac for contig  Step5. 製作ppt
  寫一個python 程式計算gc content  Step1. 至ncbi 抓取菌株 Step2. 程式步驟
 讀入fasta檔 計算sequence的gc content 可使用(SeqIO做序列處理) 執行程式必須為此方式
&amp;gt; python yourpyscript.py ecoli.fasta output : gc-content: XX.</description>
    </item>
    
    <item>
      <title>Genome alignement and tools</title>
      <link>https://spaert.github.io/posts/alignment/</link>
      <pubDate>Tue, 30 Jul 2019 18:42:10 +0800</pubDate>
      
      <guid>https://spaert.github.io/posts/alignment/</guid>
      <description>Local alignment Blast (Basic Local Alignment Search Tool ) Is an algorithm for comparing primary biological sequence information
   Program Query Search Database     blastn DNA -&amp;gt; DNA   blastp protein -&amp;gt; protein   blastx DNA -&amp;gt; protein     Bit score : The higher the bit-score, the better the sequence similarity Identity : $$identity = \frac{match}{total} $$
ATCTG || || identity : 80% ATATG  E-value : The smaller the E-value, the better the match.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://spaert.github.io/about/</link>
      <pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://spaert.github.io/about/</guid>
      <description> 施佩妏 Pei-Wen Shih 目前於中正大學修讀碩士學位
研究領域主要在基因組裝及修正 </description>
    </item>
    
  </channel>
</rss>